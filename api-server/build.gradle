plugins {
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'com.mysql:mysql-connector-j'

    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'de.codecentric:spring-boot-admin-starter-client:3.1.0'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.2'

    // MongoDB for chart data
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'

    // Flyway
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-mysql'

    implementation "com.querydsl:querydsl-jpa:5.0.0:jakarta"
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    testImplementation "org.junit.jupiter:junit-jupiter"
    testImplementation "org.mockito:mockito-core"
}


querydsl {
    jpa = true
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    querydsl.extendsFrom compileClasspath
}

def querydslTask = tasks.named('compileQuerydsl').getOrNull()
def initQuerydslSourcesDir = tasks.named('initQuerydslSourcesDir').getOrNull()

if (querydslTask && initQuerydslSourcesDir) {
    querydslTask.enabled = false
    initQuerydslSourcesDir.enabled = false
}

compileQuerydsl{
    options.annotationProcessorPath = configurations.querydsl
}

bootJar {
    enabled = true
    archiveFileName = 'web.jar'
}

jar {
    enabled = false
}