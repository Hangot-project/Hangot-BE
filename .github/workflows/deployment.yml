name: CD

on:
  push:
    branches: [ "main" ]

permissions:
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: gradle set up
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5

      - name: gradlew 권한 설정
        run: chmod +x gradlew

      - name: gateway-api application.yml 생성
        run: |
          mkdir -p ./gateway-api/src/main/resources
          echo "${{ secrets.APPLICATION_GATEWAY }}" | base64 -d > ./gateway-api/src/main/resources/application-prod.yml
        shell: bash

      - name: data-crawler application.yml 생성
        run: |
          mkdir -p ./data-crawler/src/main/resources
          echo "${{ secrets.APPLICATION_CRAWLER }}" | base64 -d > ./data-crawler/src/main/resources/application-prod.yml
        shell: bash

      - name: data-ingestor application.yml 생성
        run: |
          mkdir -p ./data-ingestor/src/main/resources
          echo "${{ secrets.APPLICATION_INGESTOR }}" | base64 -d > ./data-ingestor/src/main/resources/application-prod.yml
        shell: bash

      - name: admin-server application.yml 생성
        run: |
          mkdir -p ./admin-server/src/main/resources
          echo "${{ secrets.APPLICATION_ADMIN }}" | base64 -d > ./admin-server/src/main/resources/application-prod.yml
        shell: bash

      - name: 빌드 확인
        run: ./gradlew build

      - name: Docker set up
        uses: docker/setup-buildx-action@v3

      - name: Docker gateway-api 이미지 빌드
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/gateway-api:latest ./gateway-api 
          docker push ${{ secrets.DOCKER_USERNAME }}/gateway-api:latest

      - name: Docker data-crawler 이미지 빌드
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/data-crawler:latest ./data-crawler 
          docker push ${{ secrets.DOCKER_USERNAME }}/data-crawler:latest

      - name: Docker data-ingestor 이미지 빌드
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/data-ingestor:latest ./data-ingestor 
          docker push ${{ secrets.DOCKER_USERNAME }}/data-ingestor:latest

      - name: Docker admin-server 이미지 빌드
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/admin-server:latest ./admin-server
          docker push ${{ secrets.DOCKER_USERNAME }}/admin-server:latest

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ap-northeast-2

      - name: api 서버 배포
        run: |
          aws ssm send-command \
            --instance-ids ${{ secrets.API_INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}",
              "cd /home/ubuntu && export DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}",
              "docker-compose down || true",
              "docker pull ${{ secrets.DOCKER_USERNAME }}/gateway-api:latest",
              "docker pull ${{ secrets.DOCKER_USERNAME }}/data-ingestor:latest",
              "docker-compose up -d"
            ]' 

      - name: crawler 서버 배포
        run: |
          aws ssm send-command \
            --instance-ids ${{ secrets.CRALWER_INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}",
              "cd /home/ubuntu && export DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}",
              "docker-compose down || true",
              "docker pull ${{ secrets.DOCKER_USERNAME }}/data-crawler:latest", 
              "docker-compose up -d"
            ]'